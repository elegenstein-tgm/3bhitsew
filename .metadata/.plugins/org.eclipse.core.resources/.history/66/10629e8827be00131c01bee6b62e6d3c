import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * 
 */

/**
 * @author Julian Plueger
 *
 */
public class SSPView extends JFrame {
	public JPanel top, ml, mc,mr,bot,uc;
	private JButton load, save,stein,schere,papier;
	protected int win, lose;
	public JLabel Spielstand = new JLabel();
	public JButton cchoosen = new JButton("");
	private SSPControl c= new SSPControl();
	public SSPView(){
		super("Schere-Stein-Papier");
		init();
		JOptionPane.showMessageDialog(null, "Bei gleicher Auswahl gewinnt Spieler \nBei wen der Spieler den dominierende Wahl nimmt gewinnt der Spieler\nBei der Wahl des Schwächeren gewinnt der Computer!");
		setVisible(true);
		setSize(1000, 1000);
		c.start();
	}
	public void init(){
		bot = new JPanel(new BorderLayout());
		load = new JButton("Load");
		save = new JButton("Save");
		load.addActionListener(c);
		save.addActionListener(c);
		Spielstand = new JLabel("");
		bot.add(load,"East");
		bot.add(save,"West");
		bot.add(Spielstand,BorderLayout.CENTER);
		this.setLayout(new BorderLayout());
		this.add(bot,"South");
		mc = new JPanel(new GridLayout(3, 2));
		stein = new JButton("Stein");
		stein.addActionListener(c);
		schere = new JButton("Schere");
		schere.addActionListener(c);
		papier = new JButton("Papier");
		papier.addActionListener(c);
		mc.add(schere);
		mc.add(new JPanel());
		mc.add(stein);
		mc.add(cchoosen);
		mc.add(papier);
		this.add(mc,"Center");
		this.add(bot,"South");


	}
	public static void main(String[] args){
		new SSPView();
	}
	public class SSPControl extends Thread implements ActionListener {

		private boolean aperf= false;
		private int selc = 0;
		int i=0;
		public void actionPerformed(ActionEvent e) {
			if(e.getSource() instanceof JButton){
				aperf=true;
				char sc = e.getActionCommand().toLowerCase().charAt(1);
				switch(sc){
				case 'c':
					selc = 0;
					break;
				case 't':
					selc = 1;
					break;
				case 'a':
					selc = 2;
					break;
				}
				takeVals();
			}

		}
		private void takeVals(){
			if(selc == i){
				JOptionPane.showMessageDialog(null, "Gleiche Auswahl bitte Nochmal");
				aperf=false;
			}
			if(selc == i-- || selc == i+2){
				JOptionPane.showMessageDialog(null, "Computer hat gewonnen");
				lose++;
				changest(false);
				aperf=false;
			}
			if(selc == i++ || selc == i-2){
				JOptionPane.showMessageDialog(null, "Spieler hat gewonnen");
				win++;
				changest(true);
				aperf=false;
			}
		}
		private void changest(boolean b){
			Spielstand.setText("Gewonnen: " + win+" Verloren: "+lose);
			
		}
		public void run(){
			while(true){
				while(!aperf){
					try {
						sleep(1000);
						if(i < 3){
							i++;
						}else{
							i=0;
						}
						changecc(i);
					} catch (InterruptedException e) {
						System.out.print("TE");
					}
					
				}
			}
		}

		private void changecc(int i){
			switch(i){
			case 0:
				cchoosen.setText("Schere");
				break;
			case 1:
				cchoosen.setText("Stein");
				break;
			case 2:
				cchoosen.setText("Papier");
				break;
			}
		}
	}
}
